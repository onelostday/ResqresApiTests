plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
    id "io.freefair.lombok" version "6.4.2"
}

repositories {
    mavenCentral()
}

def restAssured = '4.5.1',
    allureVersion = '2.17.3',
    selenideVersion = '6.3.5',
    junitVersion = '5.8.2'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.9',
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:json-schema-validator:$restAssured",
            "io.rest-assured:rest-assured:$restAssured",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            'com.fasterxml.jackson.core:jackson-databind:2.13.2.2',
            "org.aeonbits.owner:owner:1.0.12",
            'org.assertj:assertj-core:3.22.0',
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly(
            'org.slf4j:slf4j-simple:1.7.36',
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'api'
    }
}